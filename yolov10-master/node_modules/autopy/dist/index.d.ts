import { Options } from "execa";
/**
 * A semver version or range that specifies the desired Python version to download or use for a virtual environment. The
 * version or range should follow the format defined by [semver](https://www.npmjs.com/package/semver). As
 * [python-build-standalone](https://github.com/indygreg/python-build-standalone) doesn't offer all Python versions, one
 * should typically specify a range (usually a tilde or caret range). If not specified, the latest available version is
 * used.
 */
export type SemverVersionSpecifier = string | undefined;
/**
 * Downloads and extracts a Python installation that satisfies the given version range from
 * [python-build-standalone](https://github.com/indygreg/python-build-standalone) releases. The installation is cached
 * in a global directory and reused if possible.
 *
 * @param versionRange A semver version or range that specifies the desired Python version. If not specified, the latest
 *   available version is used.
 * @returns The path to the Python installation directory.
 */
export const downloadPython: (versionRange: SemverVersionSpecifier) => Promise<string>;
/** Options for creating or getting a virtual environment with specific requirements. */
export type VenvOptions = {
    /** The name of the virtual environment. */
    name: string;
    /** The Python version to use for the virtual environment. Passed to {@link downloadPython}. */
    pythonVersion: SemverVersionSpecifier;
    /** The list of Python packages and their versions to install in the virtual environment. */
    requirements: {
        /** The name of the package to install. */
        name: string;
        /**
         * A [PEP 440 version specifier](https://peps.python.org/pep-0440/#version-specifiers) that defines the version
         * of the package to install.
         */
        version: string;
    }[];
    /**
     * Whether to check if the requirements are already satisfied and install them if necessary. Defaults to true. If
     * false, the virtual environment may not have (all) the specified packages installed.
     */
    checkRequirements?: boolean;
    /**
     * Whether to allow upgrading the Python version of the virtual environment if it is already created. Defaults to
     * true. If false, calling `getVenv()` on an existing venv with an older (non-matching) Python version will throw an
     * error. If true, the Python version will be upgraded if necessary. This will cause the venv to be recreated.
     */
    allowPythonUpgrade?: boolean;
};
/**
 * Creates or gets a virtual environment with the specified Python version and requirements. Returns a function for
 * running commands in the virtual environment.
 *
 * Note: If you need a specific version of pip, you can specify that in the requirements and it will be installed before
 * all other requirements.
 *
 * @param options The options for creating or getting the virtual environment. See {@link VenvOptions}.
 *
 * @returns A function that can be used to execute Python commands in the virtual environment, with all necessary
 *   environment variables set up correctly. The function is a wrapper around
 *   [`execa`](https://github.com/sindresorhus/execa).
 */
export const getVenv: (options: VenvOptions) => Promise<(file: string, args?: string[], options?: Options) => import("execa").ExecaChildProcess<string>>;
/**
 * Removes the virtual environment with the specified name.
 *
 * @param name The name of the virtual environment to remove.
 */
export const removeVenv: (name: string) => Promise<void>;

//# sourceMappingURL=index.d.ts.map
