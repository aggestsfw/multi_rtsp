{"mappings":"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","sources":["src/index.ts","package.json"],"sourcesContent":["import { decompress as decompressZstd } from '@mongodb-js/zstd';\nimport { satisfies as pep440Satisfies } from '@renovatebot/pep440';\nimport { createHash } from 'crypto';\nimport decompress from 'decompress';\nimport type { Options as ExecaOptions } from 'execa';\nimport { execa } from 'execa';\nimport fse, { remove } from 'fs-extra';\nimport globalCacheDir from 'global-cache-dir';\nimport { Octokit } from 'octokit';\nimport { join } from 'path';\nimport lockfile from 'proper-lockfile';\nimport semverCompare from 'semver/functions/compare.js';\nimport semverSatifies from 'semver/functions/satisfies.js';\nimport { version as autopyVersion } from '../package.json';\n\n/**\n * A semver version or range that specifies the desired Python version to download or use for a virtual environment. The\n * version or range should follow the format defined by [semver](https://www.npmjs.com/package/semver). As\n * [python-build-standalone](https://github.com/indygreg/python-build-standalone) doesn't offer all Python versions, one\n * should typically specify a range (usually a tilde or caret range). If not specified, the latest available version is\n * used.\n */\nexport type SemverVersionSpecifier = string | undefined;\n\nconst getPythonDownloadLink = async (versionRange: SemverVersionSpecifier) => {\n    const version = versionRange ?? '>= 0';\n\n    const targetMap = {\n        darwin: {\n            x64: 'x86_64-apple-darwin',\n            arm64: 'aarch64-apple-darwin',\n        },\n        win32: {\n            x64: 'x86_64-pc-windows-msvc-shared',\n            ia32: 'i686-pc-windows-msvc-shared',\n        },\n        linux: {\n            x64: 'x86_64-unknown-linux-gnu',\n            ia32: 'i686-unknown-linux-gnu',\n            arm64: 'aarch64-unknown-linux-gnu',\n        },\n    };\n    const target = targetMap[process.platform as 'win32'][process.arch as 'x64'];\n    if (!target) throw new Error(`Unsupported platform: ${process.platform}-${process.arch}`);\n\n    const octokit = new Octokit({\n        userAgent: `autopy/${autopyVersion} (https://github.com/tweaselORG/autopy)`,\n    });\n\n    const releasesIterator = octokit.paginate.iterator(octokit.rest.repos.listReleases, {\n        owner: 'indygreg',\n        repo: 'python-build-standalone',\n        // eslint-disable-next-line camelcase\n        per_page: versionRange === undefined ? 1 : 10,\n    });\n\n    for await (const { data: releases } of releasesIterator) {\n        for (const release of releases) {\n            // \"Casual users will likely want to use the `install_only` archive, as most users do not need the build\n            // artifacts present in the `full` archive.\"\n            const assetRegex = new RegExp(\n                `^cpython-(?<version>\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\\\\+\\\\d+-${target}-install_only\\\\.tar\\\\.(?<ext>gz|zst)$`\n            );\n\n            const asset = release.assets\n                .map((a) => ({ ...a, version: assetRegex.exec(a.name)?.groups?.['version'] }))\n                .sort((a, b) => {\n                    if (a.version && b.version) return semverCompare(b.version, a.version);\n                    if (a.version) return -1;\n                    if (b.version) return 1;\n                    return 0;\n                })\n                .find((a) => a.version && semverSatifies(a.version, version));\n            if (asset) {\n                const checksumAsset = release.assets.find((a) => a.name === `${asset.name}.sha256`);\n                return {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    version: asset.version!,\n                    pythonUrl: asset.browser_download_url,\n                    checksumUrl: checksumAsset?.browser_download_url,\n                };\n            }\n        }\n    }\n\n    throw new Error(`No release for Python ${version} found.`);\n};\n\n/**\n * Downloads and extracts a Python installation that satisfies the given version range from\n * [python-build-standalone](https://github.com/indygreg/python-build-standalone) releases. The installation is cached\n * in a global directory and reused if possible.\n *\n * @param versionRange A semver version or range that specifies the desired Python version. If not specified, the latest\n *   available version is used.\n * @returns The path to the Python installation directory.\n */\nexport const downloadPython = async (versionRange: SemverVersionSpecifier) => {\n    const cacheDir = await globalCacheDir('autopy');\n    await fse.ensureDir(join(cacheDir, 'python'));\n\n    const releaseLock = await lockfile.lock(join(cacheDir, 'python'), { retries: 20, stale: 120000 });\n\n    // Check if we already have a Python installation that satisfies the version range.\n    const existingInstallations = await fse.readdir(join(cacheDir, 'python'));\n    const matchingExistingVersion = existingInstallations\n        .sort((a, b) => semverCompare(b, a))\n        .find((v) => !versionRange || semverSatifies(v, versionRange));\n    if (matchingExistingVersion) {\n        const existingPythonDir = join(cacheDir, 'python', matchingExistingVersion);\n        if (\n            await fse.pathExists(\n                process.platform === 'win32'\n                    ? join(existingPythonDir, 'python.exe')\n                    : join(existingPythonDir, 'bin', 'python3')\n            )\n        ) {\n            await releaseLock();\n            return existingPythonDir;\n        }\n\n        await fse.remove(existingPythonDir);\n    }\n\n    // Otherwise, download this Python version.\n    const { version, pythonUrl, checksumUrl } = await getPythonDownloadLink(versionRange);\n    if (!checksumUrl) throw new Error(`No checksum URL for Python ${version} found.`);\n\n    const pythonArchive = await fetch(pythonUrl).then((res) => res.arrayBuffer());\n    const expectedHash = await fetch(checksumUrl)\n        .then((res) => res.text())\n        .then((t) => t.trim());\n\n    const hash = createHash('sha256').update(Buffer.from(pythonArchive)).digest('hex');\n    if (hash !== expectedHash) throw new Error(`Checksum mismatch: Expected \"${expectedHash}\", got \"${hash}\".`);\n\n    const pythonDir = join(cacheDir, 'python', version);\n    await fse.ensureDir(pythonDir);\n\n    const tarOrTarGz = pythonUrl.endsWith('.zst')\n        ? await decompressZstd(Buffer.from(pythonArchive))\n        : Buffer.from(pythonArchive);\n    await decompress(tarOrTarGz, pythonDir, { strip: 1 });\n\n    await releaseLock();\n    return pythonDir;\n};\n\nconst isVenv = async (dir: string) =>\n    (await fse.pathExists(join(dir, 'pyvenv.cfg'))) &&\n    (await fse.pathExists(\n        process.platform === 'win32' ? join(dir, 'Scripts', 'python.exe') : join(dir, 'bin', 'python3')\n    ));\n\n/** Options for creating or getting a virtual environment with specific requirements. */\nexport type VenvOptions = {\n    /** The name of the virtual environment. */\n    name: string;\n    /** The Python version to use for the virtual environment. Passed to {@link downloadPython}. */\n    pythonVersion: SemverVersionSpecifier;\n    /** The list of Python packages and their versions to install in the virtual environment. */\n    requirements: {\n        /** The name of the package to install. */\n        name: string;\n        /**\n         * A [PEP 440 version specifier](https://peps.python.org/pep-0440/#version-specifiers) that defines the version\n         * of the package to install.\n         */\n        version: string;\n    }[];\n\n    /**\n     * Whether to check if the requirements are already satisfied and install them if necessary. Defaults to true. If\n     * false, the virtual environment may not have (all) the specified packages installed.\n     */\n    checkRequirements?: boolean;\n    /**\n     * Whether to allow upgrading the Python version of the virtual environment if it is already created. Defaults to\n     * true. If false, calling `getVenv()` on an existing venv with an older (non-matching) Python version will throw an\n     * error. If true, the Python version will be upgraded if necessary. This will cause the venv to be recreated.\n     */\n    allowPythonUpgrade?: boolean;\n};\n\n/**\n * Creates or gets a virtual environment with the specified Python version and requirements. Returns a function for\n * running commands in the virtual environment.\n *\n * Note: If you need a specific version of pip, you can specify that in the requirements and it will be installed before\n * all other requirements.\n *\n * @param options The options for creating or getting the virtual environment. See {@link VenvOptions}.\n *\n * @returns A function that can be used to execute Python commands in the virtual environment, with all necessary\n *   environment variables set up correctly. The function is a wrapper around\n *   [`execa`](https://github.com/sindresorhus/execa).\n */\nexport const getVenv = async (options: VenvOptions) => {\n    const cacheDir = await globalCacheDir('autopy');\n    const venvDir = join(cacheDir, 'venv', options.name);\n    await fse.ensureDir(venvDir);\n\n    const releaseLock = await lockfile.lock(venvDir, { retries: 25, stale: 240000 });\n\n    // Check whether the potentially existing venv has a matching Python version.\n    if (options.pythonVersion && (await fse.pathExists(venvDir)) && (await isVenv(venvDir))) {\n        const pyvenvCfg = await fse.readFile(join(venvDir, 'pyvenv.cfg'), 'utf-8');\n        const venvPythonVersion = pyvenvCfg\n            .split('\\n')\n            .find((l) => l.startsWith('version = '))\n            ?.split('=')[1]\n            ?.trim();\n\n        if (venvPythonVersion && !semverSatifies(venvPythonVersion, options.pythonVersion)) {\n            if (options.allowPythonUpgrade !== false) await fse.remove(venvDir);\n            else\n                throw new Error(\n                    `The virtual environment \"${options.name}\" already exists, but has a different Python version (${venvPythonVersion}) than requested (${options.pythonVersion}) and upgrading is not allowed.`\n                );\n        }\n    }\n\n    if (!(await fse.pathExists(venvDir)) || !(await isVenv(venvDir))) {\n        const pythonDir = await downloadPython(options.pythonVersion);\n        const globalPythonBinary =\n            process.platform === 'win32' ? join(pythonDir, 'python.exe') : join(pythonDir, 'bin', 'python3');\n\n        await execa(globalPythonBinary, ['-m', 'venv', venvDir]);\n    }\n\n    const venvPythonBinary =\n        process.platform === 'win32' ? join(venvDir, 'Scripts', 'python.exe') : join(venvDir, 'bin', 'python3');\n\n    if (options.checkRequirements !== false) {\n        // Some packages require a newer pip version than shipped by python-build-standalone (e.g.\n        // https://github.com/tweaselORG/autopy/issues/5), so if the user pins a pip version, we need to install that\n        // first.\n        const pipVersion = options.requirements.find((r) => r.name === 'pip')?.version;\n        if (pipVersion) await execa(venvPythonBinary, ['-m', 'pip', 'install', `pip${pipVersion}`]);\n\n        // Then, we can proceed with installing the rest of the requirements with the correct pip version.\n        const installedPackages = await execa(venvPythonBinary, [\n            '-m',\n            'pip',\n            'list',\n            '--local',\n            '--format',\n            'json',\n        ]).then((r) => JSON.parse(r.stdout) as { name: string; version: string }[]);\n        const missingPackages = options.requirements.filter(\n            (r) =>\n                r.name !== 'pip' &&\n                !installedPackages.some((p) => p.name === r.name && pep440Satisfies(p.version, r.version))\n        );\n\n        if (missingPackages.length > 0)\n            await execa(venvPythonBinary, [\n                '-m',\n                'pip',\n                'install',\n                ...missingPackages.map((r) => `${r.name}${r.version}`),\n            ]);\n    }\n\n    await releaseLock();\n\n    const venvBinDir = join(venvDir, process.platform === 'win32' ? 'Scripts' : 'bin');\n    return (file: string, args?: string[], options?: ExecaOptions) =>\n        execa(file, args, {\n            ...options,\n            env: {\n                PYTHONHOME: undefined,\n                VIRTUAL_ENV: venvDir,\n                PATH: `${venvBinDir}${process.platform === 'win32' ? ';' : ':'}${process.env['PATH']}`,\n                ...options?.env,\n            },\n        });\n};\n\n/**\n * Removes the virtual environment with the specified name.\n *\n * @param name The name of the virtual environment to remove.\n */\nexport const removeVenv = async (name: string) => remove(join(await globalCacheDir('autopy'), 'venv', name));\n","{\n    \"name\": \"autopy\",\n    \"version\": \"1.1.1\",\n    \"description\": \"Library for depending on Python packages from JavaScript that will automatically manage a venv and download Python and pip dependencies.\",\n    \"bugs\": \"https://github.com/tweaselORG/autopy/issues\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/tweaselORG/autopy.git\"\n    },\n    \"license\": \"MIT\",\n    \"contributors\": [\n        {\n            \"name\": \"Benjamin Altpeter\",\n            \"email\": \"hi@bn.al\",\n            \"url\": \"https://benjamin-altpeter.de\"\n        },\n        {\n            \"name\": \"Lorenz Sieben\",\n            \"email\": \"me@lorenz-sieben.com\",\n            \"url\": \"https://lorenz-sieben.com\"\n        }\n    ],\n    \"type\": \"module\",\n    \"main\": \"dist/index.js\",\n    \"source\": \"src/index.ts\",\n    \"types\": \"dist/index.d.ts\",\n    \"files\": [\n        \"/dist\"\n    ],\n    \"scripts\": {\n        \"build\": \"parcel build\",\n        \"fix\": \"yarn eslint . --ignore-path .gitignore --ext .js,.jsx,.ts,.tsx --fix\",\n        \"lint\": \"tsc && eslint . --ignore-path .gitignore --ext .js,.jsx,.ts,.tsx && git diff --check\",\n        \"prepack\": \"rm -rf dist && yarn build && yarn typedoc\",\n        \"test\": \"echo 'TODO: No tests specified yet.'\",\n        \"watch\": \"parcel watch\"\n    },\n    \"husky\": {\n        \"hooks\": {\n            \"pre-commit\": \"lint-staged && tsc && typedoc && git add docs\"\n        }\n    },\n    \"lint-staged\": {\n        \"*.{ts,js,tsx,jsx,css,scss,json}\": [\n            \"prettier --write\"\n        ],\n        \"*.{ts,js,tsx,jsx}\": [\n            \"eslint --fix\"\n        ]\n    },\n    \"prettier\": \"@baltpeter/prettier-config\",\n    \"dependencies\": {\n        \"@mongodb-js/zstd\": \"^1.1.0\",\n        \"@renovatebot/pep440\": \"^2.1.15\",\n        \"decompress\": \"^4.2.1\",\n        \"execa\": \"^7.1.1\",\n        \"fs-extra\": \"^11.1.1\",\n        \"global-cache-dir\": \"^5.0.0\",\n        \"octokit\": \"^2.0.14\",\n        \"proper-lockfile\": \"^4.1.2\",\n        \"semver\": \"^7.5.1\"\n    },\n    \"devDependencies\": {\n        \"@baltpeter/eslint-config\": \"2.1.2\",\n        \"@baltpeter/prettier-config\": \"2.0.0\",\n        \"@baltpeter/tsconfig\": \"3.0.0\",\n        \"@parcel/packager-ts\": \"2.8.3\",\n        \"@parcel/transformer-typescript-types\": \"2.8.3\",\n        \"@types/decompress\": \"^4.2.4\",\n        \"@types/fs-extra\": \"^11.0.1\",\n        \"@types/proper-lockfile\": \"^4.1.2\",\n        \"@typescript-eslint/eslint-plugin\": \"5.59.6\",\n        \"eslint\": \"8.40.0\",\n        \"eslint-plugin-eslint-comments\": \"3.2.0\",\n        \"eslint-plugin-import\": \"2.27.5\",\n        \"husky\": \"4.3.7\",\n        \"lint-staged\": \"13.2.2\",\n        \"parcel\": \"2.8.3\",\n        \"prettier\": \"2.8.8\",\n        \"typedoc\": \"0.24.7\",\n        \"typedoc-plugin-markdown\": \"3.15.3\",\n        \"typescript\": \"5.0.4\"\n    },\n    \"engines\": {\n        \"node\": \">=14.0.0\"\n    }\n}\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}